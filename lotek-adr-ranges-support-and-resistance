//@version=5

indicator(title='LoTek - ADR / Support/Resistance / Ranges', shorttitle='üè¥ - ADR, Ranges & S/R', overlay=true)

is_forex_pips = false //input(title='Display average range as forex pips?', defval=false)
daily_adr           = input.int(title='Number of ADR to show', defval=5, minval=0, group="ADR Settings", inline="1")
daily_adr_length    = input.int(title='Length', defval=5, minval=0, group="ADR Settings", inline="1")
daily_adr_color     = input(title='', defval=color.new(color.aqua,50), group="ADR Settings", inline="1")

weekly_adr          = input.int(title='How many AWR to show', defval=0, minval=0, group="ADR Settings", inline="2")
weekly_adr_length   = input.int(title='Length', defval=5, minval=0, group="ADR Settings", inline="2")
weekly_adr_color    = input(title='', defval=color.new(color.orange,50), group="ADR Settings", inline="2")

new_bar(res) =>
    ta.change(time(res)) != 0
adr(length) =>
    range_1 = high - low
    ta.sma(range_1[1], length)
adr_high(adr) =>
    high - low < adr ? low + adr : close >= open ? low + adr : high
adr_low(adr) =>
    high - low < adr ? high - adr : close >= open ? low : high - adr
adr_levels(length) =>
    _adr = adr(length)
    [_adr, adr_high(_adr), adr_low(_adr)]
to_pips(val) =>
    is_forex_pips ? val / syminfo.mintick / 10 : val / syminfo.mintick
tick_format() =>
    _s = str.tostring(syminfo.mintick)
    _s := str.replace_all(_s, '25', '00')
    _s := str.replace_all(_s, '5', '0')
    _s := str.replace_all(_s, '1', '0')
    _s
draw_adr_hilo(hi_level, lo_level, res, adr, level_color, show_count, prefix) =>
    var line hi_line = na
    var line lo_line = na
    var ary_range_label = array.new_label(show_count)
    var ary_hi_line = array.new_line(show_count)
    var ary_lo_line = array.new_line(show_count)
    if new_bar(res)
        line.set_x2(hi_line, bar_index)
        line.set_x2(lo_line, bar_index)
        line.set_extend(hi_line, extend.none)
        line.set_extend(lo_line, extend.none)
        hi_line := line.new(bar_index, hi_level, bar_index, hi_level, extend=extend.right, color=level_color)
        lo_line := line.new(bar_index, lo_level, bar_index, lo_level, extend=extend.right, color=level_color)
        range_label = label.new(bar_index, hi_level, prefix + ': ' + str.tostring(to_pips(adr), tick_format()) + '\n\n', color=color(na), style=label.style_label_left, textalign=text.align_left)
        array.push(ary_hi_line, hi_line)
        array.push(ary_lo_line, lo_line)
        array.push(ary_range_label, range_label)
        line.delete(array.shift(ary_hi_line))
        line.delete(array.shift(ary_lo_line))
        label.delete(array.shift(ary_range_label))
    if not na(hi_line) and line.get_x2(hi_line) != bar_index
        line.set_x2(hi_line, bar_index)
        line.set_x2(lo_line, bar_index)


//
// Daily
//
[day_adr, day_adr_high, day_adr_low] = request.security(syminfo.tickerid, 'D', adr_levels(daily_adr_length), lookahead=barmerge.lookahead_on)
if timeframe.isintraday and daily_adr > 0
    draw_adr_hilo(day_adr_high, day_adr_low, 'D', day_adr, daily_adr_color, daily_adr, 'ADR')

//
// Weekly
//
[week_adr, week_adr_high, week_adr_low] = request.security(syminfo.tickerid, 'W', adr_levels(weekly_adr_length), lookahead=barmerge.lookahead_on)
if (timeframe.isintraday or timeframe.isdaily) and weekly_adr > 0
    draw_adr_hilo(week_adr_high, week_adr_low, 'W', week_adr, weekly_adr_color, weekly_adr, 'AWR')




/////////////////////////////////////////////
// Beginning of Next Support and Resistance

len = input.int(title='Pivot Length', defval=40, minval=1, group="Next Support and Resistance", inline="1")

is_pivot(src, is_high) =>
    p = nz(src[len])
    isFound = true
    for i = 0 to len - 1 by 1
        if is_high ? src[i] >= p : src[i] <= p
            isFound := false
            break

    for i = len + 1 to 2 * len by 1
        if is_high ? src[i] >= p : src[i] <= p
            isFound := false
            break

    isFound

is_high = is_pivot(high, true)
is_low = is_pivot(low, false)

var high_line = 0.0
var low_line = 0.0

high_line := is_high ? nz(high[len]) : high_line[1]
low_line := is_low ? nz(low[len]) : low_line[1]

var pline = 0.0
pline := is_high ? high_line : is_low ? low_line : pline[1]

if is_high or is_low
    y = is_high ? high[len] : low[len]
    // label.new(x=bar_index[len], y=y, yloc=yloc.price, style=label.style_circle, size=size.tiny, color=c)
    line.new(x1=bar_index[2 * len], y1=y, x2=bar_index, y2=y, style=line.style_dotted, color=color.white)

_style = plot.style_linebr
lbr(l) =>
    l == l[1] ? l : na

src = hl2
var x = 0
var y = 0

x := 0
for i = 0 to 1000 by 1
    if src < pline[i] and math.abs(src - pline[i]) < math.abs(src - pline[x])
        x := i
        x

res = plot(lbr(pline[x]), title='Resistance Lines', color=color.new(color.red, 0), style=_style)

y := 0
for i = 0 to 1000 by 1
    if src > pline[i] and math.abs(src - pline[i]) < math.abs(src - pline[y])
        y := i
        y

sup = plot(lbr(pline[y]), title='Support Lines', color=color.new(color.lime, 0), style=_style)

w = color.new(color.white, 90)
r = color.new(color.red, 90)
fc = pline[x] > pline[y] ? w : r


/////////////////////////////////////////////
// ADR
lengthEMA       = input.int(34,     title='EMA Length',                 group="Range Identifier", inline="1")
connectRanges   = input.bool(false, title='Connect Ranges',             group="Range Identifier", inline="2")
showMidLine     = input.bool(false, title='Show MidLine',               group="Range Identifier", inline="2")
showEMA         = input.bool(true,  title='Show EMA',                   group="Range Identifier", inline="3")
hc              = input.bool(true,  title='Highlight Consolidation',    group="Range Identifier", inline="3")

e = ta.ema(close, lengthEMA)
up = close
down = close
up := close < nz(up[1]) and close > down[1] ? nz(up[1]) : high
down := close < nz(up[1]) and close > down[1] ? nz(down[1]) : low
mid = math.avg(up, down)

ul = plot(connectRanges ? up : up == nz(up[1]) ? up : na, color=color.new(color.gray, 0), linewidth=2, style=plot.style_linebr, title='Up')
ll = plot(connectRanges ? down : down == nz(down[1]) ? down : na, color=color.new(color.gray, 0), linewidth=2, style=plot.style_linebr, title='Down')
dummy = plot(hc ? close > e ? down : up : na, color=color.new(color.gray, 0), style=plot.style_circles, linewidth=0, title='Dummy')

fill(ul, dummy, color=color.new(color.lime, 90))
fill(dummy, ll, color=color.new(color.red, 90))
plot(showMidLine ? mid : na, color=color.new(color.gray, 0), linewidth=1, title='Mid')
plot(showEMA ? e : na, title='EMA', color=color.new(color.yellow, 0), linewidth=1)

// LoTek
// ---------------------------------------------------------------------------------------- //
var table logo = table.new(position.bottom_right, 1, 1)
table.cell(logo, 0, 0, 'üè¥', text_size=size.normal, text_color=color.teal)
