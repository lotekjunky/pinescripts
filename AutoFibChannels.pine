//@version=5
// ══════════════════════════════════════════════════════════════════════════════════════════════════ //
//# * ══════════════════════════════════════════════════════════════════════════════════════════════
//# *
//# * Study       : Auto Fib Channels
//# *                - Auto Fib Channels, derived from build-in Auto Fib Retracement
//# *                - Auto Fib Retracement, build-in, customized to fit with Auto Fib Channels
//# *                - Zig Zag, derived from build-in Auto Fib Retracement 
//# * Author      : © dgtrd
//# *
//# * Revision History
//# *  Release    : Apr 05, 2021
//# *  Update     : Apr 13, 2021 : Fibonacci Extensions are added as an alternative option to Fibonacci Retracements
//# *  Update     : Feb 15, 2022 : Thanks to New Pine Feature, added backgroud coloring option
//# *
//# * ══════════════════════════════════════════════════════════════════════════════════════════════
// ══════════════════════════════════════════════════════════════════════════════════════════════════ //

indicator('LoTek - Auto Fib Channels by DGT', '🏴 - Auto Fib Channels', true, max_lines_count=144)

// -Inputs ══════════════════════════════════════════════════════════════════════════════════════ //
tooltip_threshold = 'Deviation is a multiplier that affects how much the price should deviate from the previous pivot in order for the bar to become a new pivot' + 
                     '\n\nDepth affects the minimum number of bars that will be taken into account when building'

// ---------------------------------------------------------------------------------------- //
// pivots threshold

threshold_multiplier = input.float(3, 'Deviation', minval=0, inline='Pivots', tooltip=tooltip_threshold)
dev_threshold        = ta.atr(10) / close * 100 * threshold_multiplier
depth                = input.int(11, 'Depth', minval=1, inline='Pivots')

// pivots threshold
// ---------------------------------------------------------------------------------------- //
// Zig Zag

ZigZag  = input.bool(false, 'Zig Zag', inline='ZZ', group='Zig Zag Settings')
zzColor = input.color(color.orange, '', inline='ZZ', group='Zig Zag Settings')
zzWidth = input.int(1, '', minval=1, inline='ZZ', group='Zig Zag Settings')
zzStyle = input.string('Solid', '', options=['Dashed', 'Dotted', 'Solid'], inline='ZZ', group='Zig Zag Settings')

// Zig Zag
// ---------------------------------------------------------------------------------------- //
// Fibonacci 

group_fib_RetExt = 'Channel / Retracement-Extention Settings'

isFibChannel  = input.bool(true, 'Fib Channel     |   ', inline='FIB', group=group_fib_RetExt)
fibExtRet     = input.string('Fib Retracement', '', options=['Fib Retracement', 'Fib Extention'], inline='FIB', group=group_fib_RetExt)

isFibRetOrExt = input.bool(true, '', inline='FIB', group=group_fib_RetExt)

histPivot     = input.int(0, 'Historical Channels / Retracements-Extentions', minval=0, inline='hPVT', group=group_fib_RetExt)
extendL       = input.bool(true, 'Extend Lines', group=group_fib_RetExt)
reverse       = input.bool(false, 'Reverse Retracement-Extention Levels', group=group_fib_RetExt)

bgChannel     = input.bool(false, 'Channel Background', group=group_fib_RetExt)

channelLevels = input.bool(true, 'Level Labels : Channel | Retracement-Extention', inline='Levels', group=group_fib_RetExt)
retExtLevels  = input.bool(true, '', inline='Levels', group=group_fib_RetExt)
levelPrices   = input.bool(true, 'Prices    |    Levels', inline='Levels2', group=group_fib_RetExt)
levelLevels   = input.bool(true, '', inline='Levels2', group=group_fib_RetExt)
levelFormat   = input.string('Values', '', options=['Values', 'Percent'], inline='Levels2', group=group_fib_RetExt)

uniColor      = input.bool(true, 'UniColor : Channels | Retracements-Extentions', inline='uni', group=group_fib_RetExt)
uniColor1     = input.color(color.new(color.aqua,30), '', inline='uni', group=group_fib_RetExt)
uniColor2     = input.color(color.new(color.orange,30), '', inline='uni', group=group_fib_RetExt)

printvbar     = input.bool(false, "Print a vertical bar on last candle", group="LoTek", inline="1") //Not used yet

// Fibonacci 
// ---------------------------------------------------------------------------------------- //

// -Calculations ════════════════════════════════════════════════════════════════════════════════ //

var line lineLast = na
var int iLast     = 0
var int iPrev     = 0
var float pLast   = 0
var isHighLast    = false  // otherwise the last pivot is a low pivot

var iPrevPivot = 0
var pPrevPivot = 0.
var iLastPivot = 0
var pLastPivot = 0.

pivots(src, length, isHigh) =>
    l2 = length * 2
    c = nz(src[length])
    ok = true

    for i = 0 to l2 by 1
        if isHigh and src[i] > c
            ok := false
            ok

        if not isHigh and src[i] < c
            ok := false
            ok
    if ok
        [bar_index[length], c]
    else
        [int(na), float(na)]

[iH, pH] = pivots(high, depth / 2, true )
[iL, pL] = pivots(low , depth / 2, false)

calc_dev(base_price, price) =>
    100 * (price - base_price) / price

pivotFound(dev, isHigh, index, price) =>
    if isHighLast == isHigh and not na(lineLast)
        // same direction
        if isHighLast ? price > pLast : price < pLast
            line.set_xy2(lineLast, index, price)
            [lineLast, isHighLast]
        else
            [line(na), bool(na)]
    else
        // reverse the direction (or create the very first line)
        if math.abs(dev) > dev_threshold
            // price move is significant

            // ---------------------------------------------------------------------------------------- //
            [zzCol, zzWid, zzSty] = if not ZigZag
                [na, 1, line.style_dashed]
            else
                [zzColor, zzWidth, zzStyle == 'Solid' ? line.style_solid : zzStyle == 'Dotted' ? line.style_dotted : line.style_dashed]
            // ---------------------------------------------------------------------------------------- //

            id = line.new(iLast, pLast, index, price, color=zzCol, width=zzWid, style=zzSty)
            [id, isHigh]
        else
            [line(na), bool(na)]

if not na(iH)
    dev = calc_dev(pLast, pH)
    [id, isHigh] = pivotFound(dev, true, iH, pH)

    if not na(id)
        if id != lineLast
            // ---------------------------------------------------------------------------------------- //
            iPrevPivot := line.get_x1(lineLast)
            pPrevPivot := line.get_y1(lineLast)
            iLastPivot := line.get_x2(lineLast)
            pLastPivot := line.get_y2(lineLast)

            if not ZigZag
            // ---------------------------------------------------------------------------------------- //

                line.delete(lineLast)

        lineLast := id
        isHighLast := isHigh
        iPrev := iLast
        iLast := iH
        pLast := pH
        pLast
else
    if not na(iL)
        dev = calc_dev(pLast, pL)
        [id, isHigh] = pivotFound(dev, false, iL, pL)

        if not na(id)
            if id != lineLast
                // ---------------------------------------------------------------------------------------- //
                iPrevPivot := line.get_x1(lineLast)
                pPrevPivot := line.get_y1(lineLast)
                iLastPivot := line.get_x2(lineLast)
                pLastPivot := line.get_y2(lineLast)

                if not ZigZag
                // ---------------------------------------------------------------------------------------- //

                    line.delete(lineLast)

            lineLast := id
            isHighLast := isHigh
            iPrev := iLast
            iLast := iL
            pLast := pL
            pLast

iStartBase = histPivot > 0 ? ta.valuewhen(ta.change(iPrevPivot), iPrevPivot, histPivot)     : ta.valuewhen(ta.change(iPrevPivot), iPrevPivot, 0)
pStartBase = histPivot > 0 ? ta.valuewhen(ta.change(pPrevPivot), pPrevPivot, histPivot)     : ta.valuewhen(ta.change(pPrevPivot), pPrevPivot, 0)
iEndBase   = histPivot > 0 ? ta.valuewhen(ta.change(iLastPivot), iLastPivot, histPivot - 1) : line.get_x2(lineLast)
pEndBase   = histPivot > 0 ? ta.valuewhen(ta.change(pLastPivot), pLastPivot, histPivot - 1) : line.get_y2(lineLast)
iMidPivot  = histPivot > 0 ? ta.valuewhen(ta.change(iPrevPivot), iPrevPivot, histPivot - 1) : line.get_x1(lineLast)
pMidPivot  = histPivot > 0 ? ta.valuewhen(ta.change(pPrevPivot), pPrevPivot, histPivot - 1) : line.get_y1(lineLast)

slope      = (pEndBase - pStartBase) / (iEndBase - iStartBase)

iPivotDiff = iMidPivot - iStartBase
pPivotDiff = math.abs(pMidPivot - pStartBase)

f_crossingLevel(sr, r) =>
    r > sr and r < sr[1] or r < sr and r > sr[1]

var a_ln = array.new_line()
var a_lf = array.new_linefill()
var a_cl = array.new_color()

if ta.change(time) and array.size(a_ln) > 0
    for i = 1 to array.size(a_ln) by 1
        line.delete(array.shift(a_ln))

if ta.change(time) and array.size(a_lf) > 0
    for i = 1 to array.size(a_lf) by 1
        linefill.delete(array.shift(a_lf))

f_drawLineX(_iStart, _pStart, _iEnd, _pEnd, _color, _width, _style, _extend, _level) =>
    style = _style == 'Solid' ? line.style_solid : _style == 'Dotted' ? line.style_dotted : line.style_dashed

    if _iStart < bar_index + 500
        array.push(a_ln, line.new(_iStart, _pStart, _iEnd, _pEnd, xloc.bar_index, extendL ? extend.both : extend.right, _color, style, _width))

f_drawLine(_price, _color, _ext) =>
    var id = line.new(iLast, _price, bar_index, _price, xloc.bar_index, extendL ? extend.both : extend.right, _color, line.style_solid, 1)
    if not na(lineLast)
        line.set_xy1(id, _ext ? iMidPivot : iStartBase, _price)
        line.set_xy2(id, line.get_x2(lineLast), _price)

f_drawLabel(index, price, txt, colorx, txtColor, style, size, align, tooltip) =>
    labelsAlignStr = txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'

    var id = label.new(index, price, txt, color=colorx, textcolor=txtColor, style=style, size=size, textalign=align)
    label.set_xy(id, index, price)
    label.set_text(id, labelsAlignStr)
    label.set_textcolor(id, txtColor)
    label.set_tooltip(id, tooltip)

f_labelText(level, price, txt) =>
    l = levelFormat == 'Values' ? txt + str.tostring(level) : txt + str.tostring(level * 100) + '%'
    (levelLevels ? l : '') + (levelPrices ? ' (' + str.tostring(price, format.mintick) + ')' : '')

f_getTooltip(level, price, fibTool) =>
    fibTool + ' Level ' + str.tostring(level) + ' : ' + str.tostring(price, format.mintick)
    
if isFibChannel or (fibExtRet == 'Fib Extention' and isFibRetOrExt)
    array.push(a_ln, line.new(iStartBase, pStartBase, iMidPivot, pMidPivot, xloc.bar_index, extend.none, color.gray, line.style_dashed, 1))
    array.push(a_ln, line.new(iMidPivot , pMidPivot , iEndBase , pEndBase , xloc.bar_index, extend.none, color.gray, line.style_dashed, 1))
if fibExtRet == 'Fib Retracement' and isFibRetOrExt and not isFibChannel
    array.push(a_ln, line.new(iStartBase, pStartBase, iMidPivot, pMidPivot, xloc.bar_index, extend.none, color.gray, line.style_dashed, 1))

processLevel(show, value, colorL) =>
    if isFibChannel
        if show
            iStart    = int(math.round(iStartBase + iPivotDiff * value))
            intercept = pStartBase < pMidPivot ? pStartBase + pPivotDiff * value - slope * iStart : pStartBase - pPivotDiff * value - slope * iStart
            pStart    = slope * iStart + intercept
            iEnd      = iStart < iEndBase ? iEndBase : iStart + 1 // bar_index
            pEnd      = slope * iEnd + intercept
            pLastBar  = slope * bar_index + intercept

            f_drawLineX(iStart, pStart, iEnd, pEnd, uniColor ? uniColor1 : colorL, 1, 'Solid', true, value)

            if channelLevels
                f_drawLabel(bar_index, pLastBar, f_labelText(value, pLastBar, ''), #00000000                    , uniColor ? uniColor1 : colorL, label.style_label_left, size.normal, text.align_left, f_getTooltip(value, pLastBar, 'Fib Channel'))
                //f_drawLabel(bar_index, pLastBar, ''                                   , uniColor ? uniColor1 : colorL, #00000000                    , label.style_circle    , size.tiny  , text.align_left, '')

            if f_crossingLevel(close, pLastBar)
                alert('AutoFibChannel: ' + syminfo.ticker + ' crossing level ' + str.tostring(value))
            
            if bgChannel
                cLines = array.size(a_ln)
                if cLines == 3
                    array.push(a_cl, colorL)
                if cLines > 3
                    array.push(a_lf, linefill.new(array.get(a_ln, cLines - 2), array.get(a_ln, cLines - 1), color.new(array.pop(a_cl), 89)))
                    array.push(a_cl, colorL)

    if isFibRetOrExt
        r = 0.
        isExt = false

        if fibExtRet == 'Fib Extention'
            isExt := true
            offset = math.abs(pMidPivot - pEndBase)
            r := pEndBase < pMidPivot ? pMidPivot - offset + (reverse ? -1 : 1) * pPivotDiff * value : pMidPivot + offset - (reverse ? -1 : 1) * pPivotDiff * value
            r
        else
            r := pStartBase < pMidPivot ? (reverse ? pMidPivot : pStartBase) + (reverse ? -1 : 1) * pPivotDiff * value : (reverse ? pMidPivot : pStartBase) - (reverse ? -1 : 1) * pPivotDiff * value
            r

        if show
            f_drawLine(r, uniColor ? uniColor2 : colorL, isExt)

            if retExtLevels
                f_drawLabel(isExt ? iMidPivot : iStartBase, r, f_labelText(value, r, (isExt ? '' : '')), #00000000, uniColor ? uniColor2 : colorL, label.style_label_right, size.normal, text.align_right, f_getTooltip(value, r, (isExt ? 'Fib Extention' : 'Fib Retracement')))

            if f_crossingLevel(close, r)
                alert('Autofib: ' + syminfo.ticker + ' crossing level ' + str.tostring(value))

group_fib_levels = 'Channel / Retracement-Extention Levels'

show_0          = input.bool (true   , '', inline='Level0' , group=group_fib_levels)
value_0         = input.float(0.     , '', inline='Level0' , group=group_fib_levels)
color_0         = input.color(#787b86, '', inline='Level0' , group=group_fib_levels)

show_0_236      = input.bool (true   , '', inline='Level0' , group=group_fib_levels)
value_0_236     = input.float(0.236  , '', inline='Level0' , group=group_fib_levels)
color_0_236     = input.color(#f44336, '', inline='Level0' , group=group_fib_levels)

show_0_382      = input.bool (true   , '', inline='Level1' , group=group_fib_levels)
value_0_382     = input.float(0.382  , '', inline='Level1' , group=group_fib_levels)
color_0_382     = input.color(#81c784, '', inline='Level1' , group=group_fib_levels)

show_0_5        = input.bool (true   , '', inline='Level1' , group=group_fib_levels)
value_0_5       = input.float(0.5    , '', inline='Level1' , group=group_fib_levels)
color_0_5       = input.color(#4caf50, '', inline='Level1' , group=group_fib_levels)

show_0_618      = input.bool (true   , '', inline='Level2' , group=group_fib_levels)
value_0_618     = input.float(0.618  , '', inline='Level2' , group=group_fib_levels)
color_0_618     = input.color(#009688, '', inline='Level2' , group=group_fib_levels)

show_0_65       = input.bool (false  , '', inline='Level2' , group=group_fib_levels)
value_0_65      = input.float(0.65   , '', inline='Level2' , group=group_fib_levels)
color_0_65      = input.color(#009688, '', inline='Level2' , group=group_fib_levels)

show_0_786      = input.bool (true   , '', inline='Level3' , group=group_fib_levels)
value_0_786     = input.float(0.786  , '', inline='Level3' , group=group_fib_levels)
color_0_786     = input.color(#64b5f6, '', inline='Level3' , group=group_fib_levels)

show_1          = input.bool (true   , '', inline='Level3' , group=group_fib_levels)
value_1         = input.float(1.     , '', inline='Level3' , group=group_fib_levels)
color_1         = input.color(#787b86, '', inline='Level3' , group=group_fib_levels)

show_1_272      = input.bool (false  , '', inline='Level4' , group=group_fib_levels)
value_1_272     = input.float(1.272  , '', inline='Level4' , group=group_fib_levels)
color_1_272     = input.color(#81c784, '', inline='Level4' , group=group_fib_levels)

show_1_414      = input.bool (false  , '', inline='Level4' , group=group_fib_levels)
value_1_414     = input.float(1.414  , '', inline='Level4' , group=group_fib_levels)
color_1_414     = input.color(#f44336, '', inline='Level4' , group=group_fib_levels)

show_1_618      = input.bool (true   , '', inline='Level5' , group=group_fib_levels)
value_1_618     = input.float(1.618  , '', inline='Level5' , group=group_fib_levels)
color_1_618     = input.color(#2196f3, '', inline='Level5' , group=group_fib_levels)

show_1_65       = input.bool (false  , '', inline='Level5' , group=group_fib_levels)
value_1_65      = input.float(1.65   , '', inline='Level5' , group=group_fib_levels)
color_1_65      = input.color(#2196f3, '', inline='Level5' , group=group_fib_levels)

show_2_618      = input.bool (false  , '', inline='Level6' , group=group_fib_levels)
value_2_618     = input.float(2.618  , '', inline='Level6' , group=group_fib_levels)
color_2_618     = input.color(#f44336, '', inline='Level6' , group=group_fib_levels)

show_2_65       = input.bool (false  , '', inline='Level6' , group=group_fib_levels)
value_2_65      = input.float(2.65   , '', inline='Level6' , group=group_fib_levels)
color_2_65      = input.color(#f44336, '', inline='Level6' , group=group_fib_levels)

show_3_618      = input.bool (false  , '', inline='Level7' , group=group_fib_levels)
value_3_618     = input.float(3.618  , '', inline='Level7' , group=group_fib_levels)
color_3_618     = input.color(#9c27b0, '', inline='Level7' , group=group_fib_levels)

show_3_65       = input.bool (false  , '', inline='Level7' , group=group_fib_levels)
value_3_65      = input.float(3.65   , '', inline='Level7' , group=group_fib_levels)
color_3_65      = input.color(#9c27b0, '', inline='Level7' , group=group_fib_levels)

show_4_236      = input.bool (false  , '', inline='Level8' , group=group_fib_levels)
value_4_236     = input.float(4.236  , '', inline='Level8' , group=group_fib_levels)
color_4_236     = input.color(#e91e63, '', inline='Level8' , group=group_fib_levels)

show_4_618      = input.bool (false  , '', inline='Level8' , group=group_fib_levels)
value_4_618     = input.float(4.618  , '', inline='Level8' , group=group_fib_levels)
color_4_618     = input.color(#81c784, '', inline='Level8' , group=group_fib_levels)

show_neg_0_236  = input.bool (false  , '', inline='Level9' , group=group_fib_levels)
value_neg_0_236 = input.float(-0.236 , '', inline='Level9' , group=group_fib_levels)
color_neg_0_236 = input.color(#f44336, '', inline='Level9' , group=group_fib_levels)

show_neg_0_382  = input.bool (false  , '', inline='Level9' , group=group_fib_levels)
value_neg_0_382 = input.float(-0.382 , '', inline='Level9' , group=group_fib_levels)
color_neg_0_382 = input.color(#81c784, '', inline='Level9' , group=group_fib_levels)

show_neg_0_618  = input.bool (true   , '', inline='Level10', group=group_fib_levels)
value_neg_0_618 = input.float(-0.618 , '', inline='Level10', group=group_fib_levels)
color_neg_0_618 = input.color(#009688, '', inline='Level10', group=group_fib_levels)

show_neg_0_65   = input.bool (false  , '', inline='Level10', group=group_fib_levels)
value_neg_0_65  = input.float(-0.65  , '', inline='Level10', group=group_fib_levels)
color_neg_0_65  = input.color(#009688, '', inline='Level10', group=group_fib_levels)

processLevel(show_neg_0_65 , value_neg_0_65 , color_neg_0_65 )
processLevel(show_neg_0_618, value_neg_0_618, color_neg_0_618)
processLevel(show_neg_0_382, value_neg_0_382, color_neg_0_382)
processLevel(show_neg_0_236, value_neg_0_236, color_neg_0_236)
processLevel(show_0        , value_0        , color_0        )
processLevel(show_0_236    , value_0_236    , color_0_236    )
processLevel(show_0_382    , value_0_382    , color_0_382    )
processLevel(show_0_5      , value_0_5      , color_0_5      )
processLevel(show_0_618    , value_0_618    , color_0_618    )
processLevel(show_0_65     , value_0_65     , color_0_65     )
processLevel(show_0_786    , value_0_786    , color_0_786    )
processLevel(show_1        , value_1        , color_1        )
processLevel(show_1_272    , value_1_272    , color_1_272    )
processLevel(show_1_414    , value_1_414    , color_1_414    )
processLevel(show_1_618    , value_1_618    , color_1_618    )
processLevel(show_1_65     , value_1_65     , color_1_65     )
processLevel(show_2_618    , value_2_618    , color_2_618    )
processLevel(show_2_65     , value_2_65     , color_2_65     )
processLevel(show_3_618    , value_3_618    , color_3_618    )
processLevel(show_3_65     , value_3_65     , color_3_65     )
processLevel(show_4_236    , value_4_236    , color_4_236    )
processLevel(show_4_618    , value_4_618    , color_4_618    )

// Fibonacci 
// ---------------------------------------------------------------------------------------- //

var table logo = table.new(position.bottom_right, 1, 1)
table.cell(logo, 0, 0, '☼☾  ', text_size=size.normal, text_color=color.teal)


// LoTek
// ---------------------------------------------------------------------------------------- //

vbarcolor = printvbar and close[0] > close[1] and barstate.islast ? color.new(color.green, 80) : printvbar and close[0] < close[1] and barstate.islast ? color.new(color.red, 80) : na
bgcolor(vbarcolor)
bgcolor(color.new(color.black,100), -1)
